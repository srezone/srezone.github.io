<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NAS上的硬盘分配</title>
    <link href="/article/3086994030.html"/>
    <url>/article/3086994030.html</url>
    
    <content type="html"><![CDATA[<h3 id="现有硬盘信息"><a href="#现有硬盘信息" class="headerlink" title="现有硬盘信息"></a>现有硬盘信息</h3><ul><li><strong>希捷酷鱼 A</strong></li></ul><p><strong>型号：</strong>ST2000DM008-2FR1</p><p><strong>产品定位：</strong>桌面级</p><p><strong>存储容量：</strong>2T</p><p><strong>存储技术：</strong>叠瓦式磁记录</p><p><strong>使用时长：</strong>5630h</p><ul><li><strong>希捷酷鱼 B</strong></li></ul><p><strong>型号：</strong>ST2000DM008-2FR1</p><p><strong>产品定位：</strong>桌面级</p><p><strong>存储容量：</strong>2T</p><p><strong>存储技术：</strong>叠瓦式磁记录</p><p><strong>使用时长：</strong>9627h</p><ul><li><strong>西部数据 HC320</strong></li></ul><p><strong>型号：</strong>HGST HUS728T8TAL</p><p><strong>产品定位：</strong>企业级</p><p><strong>存储容量：</strong>8T</p><p><strong>存储技术：</strong>垂直磁记录</p><p><strong>使用时长：</strong>139h</p><h3 id="存储方案对比"><a href="#存储方案对比" class="headerlink" title="存储方案对比"></a>存储方案对比</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>两块希捷酷鱼2T的叠瓦盘做Raid1，试图用Raid1来抵消叠瓦盘和桌面级硬盘的不可靠，但是存储容量损失较大。</p><p>西部数据HC320 8T本就是企业级硬盘，因此直接使用单盘模式。</p><p>总存储容量10T。</p><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><p>为了充分利用所有硬盘，两块希捷酷鱼2T、西部数据HC320 8T都使用单盘模式。</p><p>数据安全性方面，则使用容器运行同步工具，确保重要的资料以3副本的模式分别存储在三块硬盘中。</p><p>总存储容量12T，想来重要的资料也不会超过1/2T，且3副本模式在目前的硬件资源下是最安全的方案了。</p><h3 id="最终决定"><a href="#最终决定" class="headerlink" title="最终决定"></a>最终决定</h3><p>这么分析下来，当然选择方案二了，以单盘的形式使用这三块盘，让硬盘的利用率达到最高。由于自己评估下来，值得以3副本模式存储的重要资料也就不到1T，最多2T的样子，这样也能利用脚本实现重要数据高可靠了，想来安全性也要远高于两块桌面级别的叠瓦盘组Raid1。而且，使用CentOS容器来维持数据高可靠，可以做得非常灵活。</p>]]></content>
    
    
    <categories>
      
      <category>HomeLab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NAS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部署有3个节点的 K8S 集群</title>
    <link href="/article/3063225416.html"/>
    <url>/article/3063225416.html</url>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>此系列的议题是：研究容器集群网络，以及硬件加速的可行性。</p><p>我无意把这个系列写成从入门到精通这类教程，除非觉得有必要，否则不会对涉及到的基础知识（命令行、容器基础、VxLan网络等知识点）进行阐述，而是打算写一个学习研究过程的日记，供日后温习回忆参考。</p><p>本文是此系列的第一期，主要流水账式的部署教程，关于如何部署一个3个节点的K8S集群，网络插件选用的是flannel。本文的所有操作均基于<a href="https://srezone.open-space.cc/">这篇文章</a>继续进行的，进行部署操作前务必阅读前文。另外，本文的0x01~5章节只贴出了节点1上的操作关键步骤，但是这些步骤在3个节点上都需要做！</p><h3 id="0x01-升级系统内核版本"><a href="#0x01-升级系统内核版本" class="headerlink" title="0x01 升级系统内核版本"></a>0x01 升级系统内核版本</h3><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看当前内核版本</span>[root@node-01 ~]# uname -r3.10.0-1160.42.2.el7.x86_64<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 配置ELRepo源</span>[root@node-01 ~]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org[root@node-01 ~]# yum install https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 查看源仓，长期维护内核版本为5.4，因此更新到5.4版本的内核</span>[root@node-01 ~]# yum --enablerepo=elrepo-kernel list kernel-lt*<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 安装新版内核时出现软件报冲突的错误，根据提示删除老版（3.10.0）的软件包</span>[root@node-01 ~]# yum remove kernel-tools kernel-tools-libs<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 尝试重新安装，一切顺利</span>[root@node-01 ~]# yum --enablerepo=elrepo-kernel install kernel-lt*<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 设置新装内核为系统默认启动内核</span>[root@node-01 ~]# cat /boot/grub2/grub.cfg | grep menuentry[root@node-01 ~]# grub2-set-default &#x27;Red Hat Enterprise Linux Server (5.4.152-1.el7.elrepo.x86_64) 7.9 (Maipo)&#x27;[root@node-01 ~]# grub2-editenv listsaved_entry=Red Hat Enterprise Linux Server (5.4.152-1.el7.elrepo.x86_64) 7.9 (Maipo)<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 重启以使用最新版内核</span>[root@node-01 ~]# reboot[root@node-01 ~]# uname -r5.4.152-1.el7.elrepo.x86_64</code></pre></div><h3 id="0x02-开启IPVS支持"><a href="#0x02-开启IPVS支持" class="headerlink" title="0x02 开启IPVS支持"></a>0x02 开启IPVS支持</h3><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 准备开启IPVS的脚本</span>[root@node-01 ~]# cat /etc/sysconfig/modules/ipvs.modules <span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>ipvs_modules=&quot;ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack&quot;for kernel_module in $&#123;ipvs_modules&#125;; do  /sbin/modinfo -F filename $&#123;kernel_module&#125; &gt; /dev/null 2&gt;&amp;1  if [ $? -eq 0 ]; then    /sbin/modprobe $&#123;kernel_module&#125;  fidone<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 运行并检查结果</span>[root@node-01 ~]# chmod +x /etc/sysconfig/modules/ipvs.modules [root@node-01 ~]# bash /etc/sysconfig/modules/ipvs.modules [root@node-01 ~]# lsmod | grep ip_vsip_vs_ftp              16384  0 nf_nat                 40960  1 ip_vs_ftpip_vs_sed              16384  0 ip_vs_nq               16384  0 ip_vs_fo               16384  0 ip_vs_sh               16384  0 ip_vs_dh               16384  0 ip_vs_lblcr            16384  0 ip_vs_lblc             16384  0 ip_vs_wrr              16384  0 ip_vs_rr               16384  0 ip_vs_wlc              16384  0 ip_vs_lc               16384  0 ip_vs                 155648  24 ip_vs_wlc,ip_vs_rr,ip_vs_dh,ip_vs_lblcr,ip_vs_sh,ip_vs_fo,ip_vs_nq,ip_vs_lblc,ip_vs_wrr,ip_vs_lc,ip_vs_sed,ip_vs_ftpnf_conntrack          147456  2 nf_nat,ip_vsnf_defrag_ipv6         24576  2 nf_conntrack,ip_vslibcrc32c              16384  4 nf_conntrack,nf_nat,xfs,ip_vs</code></pre></div><h3 id="0x03-禁用交换分区，启用内核转发"><a href="#0x03-禁用交换分区，启用内核转发" class="headerlink" title="0x03 禁用交换分区，启用内核转发"></a>0x03 禁用交换分区，启用内核转发</h3><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 禁用交换分区</span>[root@node-01 ~]# swapoff -a[root@node-01 ~]# vim /etc/fstab [root@node-01 ~]# cat /etc/fstab <span class="hljs-meta">#</span><span class="bash"></span><span class="bash"><span class="hljs-comment"># /etc/fstab</span></span><span class="hljs-meta">#</span><span class="bash"> Created by anaconda on Tue Oct 12 15:34:19 2021</span><span class="hljs-meta">#</span><span class="bash"></span><span class="bash"><span class="hljs-comment"># Accessible filesystems, by reference, are maintained under &#x27;/dev/disk&#x27;</span></span><span class="hljs-meta">#</span><span class="bash"> See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) <span class="hljs-keyword">for</span> more info</span><span class="hljs-meta">#</span><span class="bash"></span><span class="bash">/dev/mapper/rhel-root   /                       xfs     defaults        0 0</span>UUID=6c16024f-882a-43f3-9144-0ef8cdfc1f80 /boot                   xfs     defaults        0 0/dev/mapper/rhel-home   /home                   xfs     defaults        0 0<span class="hljs-meta">#</span><span class="bash">/dev/mapper/rhel-swap   swap                    swap    defaults        0 0</span><span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 启用内核转发</span>[root@node-01 ~]# vim /etc/sysctl.conf [root@node-01 ~]# cat /etc/sysctl.conf <span class="hljs-meta">#</span><span class="bash"> sysctl settings are defined through files <span class="hljs-keyword">in</span></span><span class="hljs-meta">#</span><span class="bash"> /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/.</span><span class="hljs-meta">#</span><span class="bash"></span><span class="bash"><span class="hljs-comment"># Vendors settings live in /usr/lib/sysctl.d/.</span></span><span class="hljs-meta">#</span><span class="bash"> To override a whole file, create a new file with the same <span class="hljs-keyword">in</span></span><span class="hljs-meta">#</span><span class="bash"> /etc/sysctl.d/ and put new settings there. To override</span><span class="hljs-meta">#</span><span class="bash"> only specific settings, add a file with a lexically later</span><span class="hljs-meta">#</span><span class="bash"> name <span class="hljs-keyword">in</span> /etc/sysctl.d/ and put new settings there.</span><span class="hljs-meta">#</span><span class="bash"></span><span class="bash"><span class="hljs-comment"># For more information, see sysctl.conf(5) and sysctl.d(5).</span></span>vm.swappiness = 0net.bridge.bridge-nf-call-iptables = 1net.ipv4.ip_forward = 1net.bridge.bridge-nf-call-ip6tables = 1[root@node-01 ~]# sysctl -a | grep vm.swappinesssysctl: reading key &quot;net.ipv6.conf.all.stable_secret&quot;sysctl: reading key &quot;net.ipv6.conf.default.stable_secret&quot;sysctl: reading key &quot;net.ipv6.conf.ens192.stable_secret&quot;sysctl: reading key &quot;net.ipv6.conf.lo.stable_secret&quot;vm.swappiness = 30<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 使设置生效并进行检查</span>[root@node-01 ~]# sysctl -pvm.swappiness = 0sysctl: cannot stat /proc/sys/net/bridge/bridge-nf-call-iptables: No such file or directorynet.ipv4.ip_forward = 1sysctl: cannot stat /proc/sys/net/bridge/bridge-nf-call-ip6tables: No such file or directory[root@node-01 ~]# sysctl -a | grep vm.swappinesssysctl: reading key &quot;net.ipv6.conf.all.stable_secret&quot;sysctl: reading key &quot;net.ipv6.conf.default.stable_secret&quot;sysctl: reading key &quot;net.ipv6.conf.ens192.stable_secret&quot;sysctl: reading key &quot;net.ipv6.conf.lo.stable_secret&quot;vm.swappiness = 0</code></pre></div><h3 id="0x04-安装并配置Docker容器环境"><a href="#0x04-安装并配置Docker容器环境" class="headerlink" title="0x04 安装并配置Docker容器环境"></a>0x04 安装并配置Docker容器环境</h3><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 安装Docker社区版软件</span>[root@node-01 ~]# yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo[root@node-01 ~]# sed -i &#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27; /etc/yum.repos.d/docker-ce.repo[root@node-01 ~]# sed -i &#x27;s/\$releasever/7/g&#x27; /etc/yum.repos.d/docker-ce.repo [root@node-01 ~]# sed -i &#x27;s/\$basearch/x86_64/g&#x27; /etc/yum.repos.d/docker-ce.repo [root@node-01 ~]# yum makecache fast[root@node-01 ~]# yum -y install docker-ce[root@node-01 ~]# systemctl enable dockerCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.[root@node-01 ~]# systemctl restart docker[root@node-01 ~]# docker versionClient: Docker Engine - Community Version:           20.10.9 API version:       1.41 Go version:        go1.16.8 Git commit:        c2ea9bc Built:             Mon Oct  4 16:08:14 2021 OS/Arch:           linux/amd64 Context:           default Experimental:      trueServer: Docker Engine - Community Engine:  Version:          20.10.9  API version:      1.41 (minimum version 1.12)  Go version:       go1.16.8  Git commit:       79ea9d3  Built:            Mon Oct  4 16:06:37 2021  OS/Arch:          linux/amd64  Experimental:     false containerd:  Version:          1.4.11  GitCommit:        5b46e404f6b9f661a205e28d59c982d3634148f8 runc:  Version:          1.0.2  GitCommit:        v1.0.2-0-g52b36a2 docker-init:  Version:          0.19.0  GitCommit:        de40ad0<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 使用阿里云的镜像加速器</span><span class="hljs-meta">#</span><span class="bash"> 指定Docker的cgroupdriver为systemd，否则与kubelet不一致会导致k8s初始化失败，kubelet的服务启动出错</span>[root@node-01 ~]# mkdir -p /etc/docker[root@node-01 ~]# tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [&quot;https://******.mirror.aliyuncs.com&quot;],  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]&#125;EOF[root@node-01 ~]# systemctl daemon-reload[root@node-01 ~]# systemctl restart docker[root@node-01 ~]# docker infoClient: Context:    default Debug Mode: false Plugins:  app: Docker App (Docker Inc., v0.9.1-beta3)  buildx: Build with BuildKit (Docker Inc., v0.6.3-docker)  scan: Docker Scan (Docker Inc., v0.8.0)Server: Containers: 17  Running: 16  Paused: 0  Stopped: 1 Images: 12 Server Version: 20.10.9 Storage Driver: overlay2  Backing Filesystem: xfs  Supports d_type: true  Native Overlay Diff: true  userxattr: false Logging Driver: json-file Cgroup Driver: systemd Cgroup Version: 1 Plugins:  Volume: local  Network: bridge host ipvlan macvlan null overlay  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog Swarm: inactive Runtimes: runc io.containerd.runc.v2 io.containerd.runtime.v1.linux Default Runtime: runc Init Binary: docker-init containerd version: 5b46e404f6b9f661a205e28d59c982d3634148f8 runc version: v1.0.2-0-g52b36a2 init version: de40ad0 Security Options:  seccomp   Profile: default Kernel Version: 5.4.152-1.el7.elrepo.x86_64 Operating System: Red Hat Enterprise Linux Server 7.9 (Maipo) OSType: linux Architecture: x86_64 CPUs: 8 Total Memory: 7.776GiB Name: node-01.open-source.cc ID: OVI7:CEM3:66VC:TIYE:LCJU:TILS:UTEA:OTDW:C3CA:22VS:FLK5:OOKJ Docker Root Dir: /var/lib/docker Debug Mode: false Registry: https://index.docker.io/v1/ Labels: Experimental: false Insecure Registries:  127.0.0.0/8 Registry Mirrors:  https://******.mirror.aliyuncs.com/ Live Restore Enabled: false</code></pre></div><h3 id="0x05-安装K8S软件包"><a href="#0x05-安装K8S软件包" class="headerlink" title="0x05 安装K8S软件包"></a>0x05 安装K8S软件包</h3><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@node-01 ~]# cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo[kubernetes]name=Kubernetesbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/enabled=1gpgcheck=0repo_gpgcheck=0gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpgEOF[root@node-01 ~]# yum install -y kubelet kubeadm kubectl[root@node-01 ~]# systemctl enable kubelet [root@node-01 ~]# systemctl restart kubelet</code></pre></div><h3 id="0x06-K8S集群的初始化与配置"><a href="#0x06-K8S集群的初始化与配置" class="headerlink" title="0x06 K8S集群的初始化与配置"></a>0x06 K8S集群的初始化与配置</h3><p>前面5个小节罗列的是其中一个节点的操作步骤，但需要在集群中的3个节点都执行，此小节会列出3个节点上的全部操作步骤。</p><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 导出默认的初始化配置，定制修改kubeadm初始化文件</span>[root@node-01 ~]# kubeadm config print init-defaultsapiVersion: kubeadm.k8s.io/v1beta3bootstrapTokens:- groups:  - system:bootstrappers:kubeadm:default-node-token  token: abcdef.0123456789abcdef  ttl: 24h0m0s  usages:  - signing  - authenticationkind: InitConfigurationlocalAPIEndpoint:  advertiseAddress: 1.2.3.4  bindPort: 6443nodeRegistration:  criSocket: /var/run/dockershim.sock  imagePullPolicy: IfNotPresent  name: node  taints: null---apiServer:  timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io/v1beta3certificatesDir: /etc/kubernetes/pkiclusterName: kubernetescontrollerManager: &#123;&#125;dns: &#123;&#125;etcd:  local:    dataDir: /var/lib/etcdimageRepository: k8s.gcr.iokind: ClusterConfigurationkubernetesVersion: 1.22.0networking:  dnsDomain: cluster.local  serviceSubnet: 10.96.0.0/12scheduler: &#123;&#125;[root@node-01 ~]# kubeadm config print init-defaults &gt; kubeadm.yaml<span class="hljs-meta">#</span><span class="bash"> 修改后的配置文件内容</span>[root@node-01 ~]# cat kubeadm.yaml apiVersion: kubeadm.k8s.io/v1beta3bootstrapTokens:- groups:  - system:bootstrappers:kubeadm:default-node-token  token: sresre.0123456789012345  ttl: 24h0m0s  usages:  - signing  - authenticationkind: InitConfigurationlocalAPIEndpoint:  advertiseAddress: 192.168.4.101  bindPort: 6443nodeRegistration:  criSocket: /var/run/dockershim.sock  imagePullPolicy: IfNotPresent  name: node-01.open-source.cc  taints: null---apiServer:  timeoutForControlPlane: 4m0sapiVersion: kubeadm.k8s.io/v1beta3certificatesDir: /etc/kubernetes/pkiclusterName: kubernetescontrollerManager: &#123;&#125;dns: &#123;&#125;etcd:  local:    dataDir: /var/lib/etcdimageRepository: k8s.gcr.iokind: ClusterConfigurationkubernetesVersion: 1.22.0networking:  dnsDomain: cluster.local  serviceSubnet: 10.96.0.0/12  podSubnet: 10.244.0.0/16scheduler: &#123;&#125;<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 使用kubeadm与准备好的初始化配置文件，进行集群master节点初始化</span>[root@node-01 ~]# kubeadm init --config=kubeadm.yaml[init] Using Kubernetes version: v1.22.0[preflight] Running pre-flight checks[preflight] Pulling images required for setting up a Kubernetes cluster[preflight] This might take a minute or two, depending on the speed of your internet connection[preflight] You can also perform this action in beforehand using &#x27;kubeadm config images pull&#x27;......<span class="hljs-meta">#</span><span class="bash"> 省略</span>......[kubelet-finalize] Updating &quot;/etc/kubernetes/kubelet.conf&quot; to point to a rotatable kubelet client certificate and key[addons] Applied essential addon: CoreDNS[addons] Applied essential addon: kube-proxyYour Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user:  mkdir -p $HOME/.kube  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config  sudo chown $(id -u):$(id -g) $HOME/.kube/configAlternatively, if you are the root user, you can run:  export KUBECONFIG=/etc/kubernetes/admin.confYou should now deploy a pod network to the cluster.Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:  https://kubernetes.io/docs/concepts/cluster-administration/addons/Then you can join any number of worker nodes by running the following on each as root:kubeadm join 192.168.4.101:6443 --token sresre.0123456789012345 \    --discovery-token-ca-cert-hash sha256:6a747449922a0132067b66989debf321a3a49e0a00a705891e34dc06eb1636e2 [root@node-01 ~]# mkdir -p $HOME/.kube[root@node-01 ~]# cp -i /etc/kubernetes/admin.conf $HOME/.kube/config[root@node-01 ~]# chown $(id -u):$(id -g) $HOME/.kube/config[root@node-01 ~]# ll -h .kube/total 8.0K-rw------- 1 root root 5.6K Oct 14 09:38 config<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 部署flannel网络插件</span>[root@node-01 ~]# wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml[root@node-01 ~]# kubectl apply -f kube-flannel.yml<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 在节点2侧执行加入集群的命令</span>[root@node-02 ~]# kubeadm join 192.168.4.101:6443 --token sresre.0123456789012345 \<span class="hljs-meta">&gt;</span><span class="bash"> --discovery-token-ca-cert-hash sha256:6a747449922a0132067b66989debf321a3a49e0a00a705891e34dc06eb1636e2</span>[preflight] Running pre-flight checks[preflight] Reading configuration from the cluster...[preflight] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;[kubelet-start] Starting the kubelet[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...This node has joined the cluster:* Certificate signing request was sent to apiserver and a response was received.* The Kubelet was informed of the new secure connection details.Run &#x27;kubectl get nodes&#x27; on the control-plane to see this node join the cluster.[root@node-02 ~]# mkdir -p $HOME/.kube[root@node-02 ~]# scp root@node-01:/etc/kubernetes/admin.conf $HOME/.kube/config[root@node-02 ~]# chown $(id -u):$(id -g) $HOME/.kube/config<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 在节点3侧执行加入集群的命令</span>[root@node-03 ~]# kubeadm join 192.168.4.101:6443 --token sresre.0123456789012345 \<span class="hljs-meta">&gt;</span><span class="bash"> --discovery-token-ca-cert-hash sha256:6a747449922a0132067b66989debf321a3a49e0a00a705891e34dc06eb1636e2</span>[preflight] Running pre-flight checks[preflight] Reading configuration from the cluster...[preflight] FYI: You can look at this config file with &#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;[kubelet-start] Starting the kubelet[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...This node has joined the cluster:* Certificate signing request was sent to apiserver and a response was received.* The Kubelet was informed of the new secure connection details.Run &#x27;kubectl get nodes&#x27; on the control-plane to see this node join the cluster.[root@node-03 ~]# mkdir -p $HOME/.kube[root@node-03 ~]# scp root@node-01:/etc/kubernetes/admin.conf $HOME/.kube/config[root@node-03 ~]# chown $(id -u):$(id -g) $HOME/.kube/config<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 在节点1侧检查集群状态，一切正常，部署完毕</span>[root@node-01 ~]# kubectl get nodesNAME                     STATUS   ROLES                  AGE     VERSIONnode-01.open-source.cc   Ready    control-plane,master   10m     v1.22.2node-02.open-source.cc   Ready    &lt;none&gt;                 9m21s   v1.22.2node-03.open-source.cc   Ready    &lt;none&gt;                 8m53s   v1.22.2<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash"> 为集群内的3个节点配置命令行补全功能</span>[root@node-01 ~]# echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc[root@node-02 ~]# echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc[root@node-03 ~]# echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>个人实验环境的基础配置</title>
    <link href="/article/4022561966.html"/>
    <url>/article/4022561966.html</url>
    
    <content type="html"><![CDATA[<h3 id="操作系统与实验环境介绍"><a href="#操作系统与实验环境介绍" class="headerlink" title="操作系统与实验环境介绍"></a>操作系统与实验环境介绍</h3><p>实验环境中共3台虚拟机，处于网段192.168.4.0/24中，此网段能够访问互联网。在安装完操作系统后，会及时对这3台虚拟机拍摄快照并附上清晰的备注信息，在之后的实验中，会根据需要频繁拍摄快照以便回退。在下一个章节会简要介绍我是如何进行系统环境初始化的，操作步骤以node-01为例，其他2台虚拟机的操作同理，不再赘述。</p><p><strong>虚拟机配置：</strong></p><p>CPU：单槽8个虚拟核心</p><p>内存：8G</p><p>硬盘：200G 精简置备</p><p><strong>虚拟机操作系统版本：</strong>RHEL-Server-7.9-x86_64</p><p><strong>虚拟机网络地址分配：</strong></p><table><thead><tr><th>主机名</th><th>IP地址</th></tr></thead><tbody><tr><td>node-01.open-source.cc</td><td>192.168.4.101</td></tr><tr><td>node-02.open-source.cc</td><td>192.168.4.102</td></tr><tr><td>node-03.open-source.cc</td><td>192.168.4.103</td></tr></tbody></table><h3 id="初始化实验环境中的三个节点"><a href="#初始化实验环境中的三个节点" class="headerlink" title="初始化实验环境中的三个节点"></a>初始化实验环境中的三个节点</h3><p><strong>网络相关配置</strong></p><p>安装完新系统后，首先进行网络相关的配置，以保证各节点网络正常，且可以通过主机名通信。</p><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 配置网卡IP、DNS、HostName</span>[root@node-01 ~]# cd /etc/sysconfig/network-scripts/[root@node-01 network-scripts]# vim ifcfg-ens192 [root@node-01 network-scripts]# cat ifcfg-ens192 NAME=ens192TYPE=EthernetDEVICE=ens192BOOTPROTO=staticDEFROUTE=yesONBOOT=yesIPADDR=192.168.4.101NETMASK=255.255.255.0GATEWAY=192.168.4.1DNS1=223.5.5.5DNS2=223.6.6.6[root@node-01 network-scripts]# systemctl restart network[root@node-01 network-scripts]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000    link/ether 00:0c:29:71:9f:1e brd ff:ff:ff:ff:ff:ff    inet 192.168.4.101/24 brd 192.168.4.255 scope global noprefixroute ens192       valid_lft forever preferred_lft forever    inet6 fe80::20c:29ff:fe71:9f1e/64 scope link        valid_lft forever preferred_lft forever[root@node-01 network-scripts]# cd[root@node-01 ~]# ping baidu.com -c 2PING baidu.com (220.181.38.251) 56(84) bytes of data.64 bytes from 220.181.38.251 (220.181.38.251): icmp_seq=1 ttl=50 time=6.04 ms64 bytes from 220.181.38.251 (220.181.38.251): icmp_seq=2 ttl=50 time=6.07 ms--- baidu.com ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 1001msrtt min/avg/max/mdev = 6.043/6.058/6.073/0.015 ms<span class="hljs-meta">#</span><span class="bash"> hostname在安装系统过程中通过图形化界面已经配置了，命令行方式可使用</span>[root@node-01 ~]# hostnamectl set-hostname ***^C[root@node-01 ~]# hostnamenode-01.open-source.cc<span class="hljs-meta">#</span><span class="bash"> 配置环境的hosts，使得各节点可以通过主机名互访</span>[root@node-01 ~]# vim /etc/hosts[root@node-01 ~]# cat /etc/hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.4.101 node-01 node-01.open-source.cc192.168.4.102 node-02 node-02.open-source.cc192.168.4.103 node-03 node-03.open-source.cc[root@node-01 ~]# ping node-01 -c 2PING node-01 (192.168.4.101) 56(84) bytes of data.64 bytes from node-01 (192.168.4.101): icmp_seq=1 ttl=64 time=0.023 ms64 bytes from node-01 (192.168.4.101): icmp_seq=2 ttl=64 time=0.040 ms--- node-01 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 999msrtt min/avg/max/mdev = 0.023/0.031/0.040/0.010 ms[root@node-01 ~]# ping node-01.open-source.cc -c 2PING node-01 (192.168.4.101) 56(84) bytes of data.64 bytes from node-01 (192.168.4.101): icmp_seq=1 ttl=64 time=0.021 ms64 bytes from node-01 (192.168.4.101): icmp_seq=2 ttl=64 time=0.061 ms--- node-01 ping statistics ---2 packets transmitted, 2 received, 0% packet loss, time 999msrtt min/avg/max/mdev = 0.021/0.041/0.061/0.020 ms</code></pre></div><p><strong>安全相关配置</strong></p><p>为了减少各类实验期间系统安全机制带来的干扰，这里提前关闭掉他们，如果非常熟悉或感兴趣，也可保持打开状态，后续再根据环境要求去配置即可。</p><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 通过修改配置文件，永久地关闭selinux</span>[root@node-01 ~]# vim /etc/sysconfig/selinux[root@node-01 ~]# cat /etc/sysconfig/selinux<span class="hljs-meta">#</span><span class="bash"> This file controls the state of SELinux on the system.</span><span class="hljs-meta">#</span><span class="bash"> SELINUX= can take one of these three values:</span><span class="hljs-meta">#</span><span class="bash">     enforcing - SELinux security policy is enforced.</span><span class="hljs-meta">#</span><span class="bash">     permissive - SELinux prints warnings instead of enforcing.</span><span class="hljs-meta">#</span><span class="bash">     disabled - No SELinux policy is loaded.</span>SELINUX=disabled<span class="hljs-meta">#</span><span class="bash"> SELINUXTYPE= can take one of three values:</span><span class="hljs-meta">#</span><span class="bash">     targeted - Targeted processes are protected,</span><span class="hljs-meta">#</span><span class="bash">     minimum - Modification of targeted policy. Only selected processes are protected.</span> <span class="hljs-meta">#</span><span class="bash">     mls - Multi Level Security protection.</span>SELINUXTYPE=targeted [root@node-01 ~]# getenforce Enforcing[root@node-01 ~]# setenforce 0<span class="hljs-meta">#</span><span class="bash"> 永久地关闭firewalld</span>[root@node-01 ~]# systemctl disable firewalldRemoved symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.[root@node-01 ~]# systemctl stop firewalld</code></pre></div><p><strong>软件源相关配置</strong></p><p>使用国内源不但访问速度更快，还能减少安装或更新软件时出现timeout错误的几率，这里选择阿里家的，同样的国内镜像站点还有网易、清华等。</p><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 检查系统已有源仓，可以看到新系统中默认没有任何源仓</span>[root@node-01 ~]# cd /etc/yum.repos.d/[root@node-01 yum.repos.d]# lltotal 0<span class="hljs-meta">#</span><span class="bash"> 配置阿里的国内镜像源仓，国内访问速度更快，减少安装或更新软件时出现timeout错误的几率</span>[root@node-01 yum.repos.d]# wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo[root@node-01 yum.repos.d]# lltotal 4-rw-r--r--. 1 root root 2523 Dec 26  2020 CentOS-Base.repo<span class="hljs-meta">#</span><span class="bash"> 替换预留字段<span class="hljs-variable">$releasever</span>为7，因为使用的系统发行版为RHEL7</span>[root@node-01 yum.repos.d]# sed -i &#x27;s/\$releasever/7/g&#x27; CentOS-Base.repo<span class="hljs-meta">#</span><span class="bash"> 使用阿里源更新系统软件，初次更新估计耗时比较久</span>[root@node-01 yum.repos.d]# yum update</code></pre></div><p>更多源仓的国内镜像，以及配置使用方法，请参考阿里源的官方网站：<a href="https://developer.aliyun.com/mirror/%E3%80%82">https://developer.aliyun.com/mirror/。</a></p><p><strong>安装常用的软件</strong></p><p>首先我常使用的一些软件，暂时没想起来别的，就先装了tree和screen，软件功能与使用方式自行了解不再赘述。</p><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@node-01 yum.repos.d]# yum install -y tree screen</code></pre></div><p><strong>重启确认各项配置仍有效</strong></p><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@node-01 ~]# getenforce Disabled[root@node-01 ~]# systemctl status firewalld● firewalld.service - firewalld - dynamic firewall daemon   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled)   Active: inactive (dead)     Docs: man:firewalld(1)[root@node-01 ~]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever    inet6 ::1/128 scope host        valid_lft forever preferred_lft forever2: ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000    link/ether 00:0c:29:71:9f:1e brd ff:ff:ff:ff:ff:ff    inet 192.168.4.101/24 brd 192.168.4.255 scope global noprefixroute ens192       valid_lft forever preferred_lft forever    inet6 fe80::20c:29ff:fe71:9f1e/64 scope link        valid_lft forever preferred_lft forever[root@node-01 ~]# cat /etc/resolv.conf<span class="hljs-meta">#</span><span class="bash"> Generated by NetworkManager</span>search open-source.ccnameserver 223.5.5.5nameserver 223.6.6.6[root@node-01 ~]# cat /etc/hosts127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6192.168.4.101 node-01 node-01.open-source.cc192.168.4.102 node-02 node-02.open-source.cc192.168.4.103 node-03 node-03.open-source.cc[root@node-01 ~]#</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Kubernetes</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OpenStack 社区已正式发布第24个大版本-Xena</title>
    <link href="/article/1882097394.html"/>
    <url>/article/1882097394.html</url>
    
    <content type="html"><![CDATA[<p>OpenStack社区近期正式发布了第24个版本-Xena，OpenStack作为被广泛部署的开源云基础设施软件，其新版本增加了对新型硬件功能的支持，优化了各类组件间的集成，并且通过减少技术债务来维护OpenStack软件的稳定可靠性。</p><p>OpenStack作为全球最活跃的开源项目之一，开发者积极参与并由此构建了一个充满活力的社区，<strong>在Xena版本为期25周的开发中，来自125个组织/机构的680多位开发者累计提交了15,000项修改</strong>。</p><p><strong>关于Xena版本的更新要点：</strong></p><p>Xena这个大版本强化了OpenStack高度灵活的项目集成能力，如Cyborg、Neutron及Nova等组件的集成。在Xena版本中，Nova合并了一系列补丁，现在虚拟机的网络端口可以通过Cyborg管理的PCI设备（SmartNICs）来提供。采用该新功能后，网络相关的工作负载将被卸载到PCI设备，且用户体验无明显差异。此外，Nova的libvirt驱动程序不仅可支持虚拟GPUs，还可支持任何使用VFIO-mdev虚拟框架的PCI设备，如网络适配器或计算加速器等。</p><p><strong>此外，在Xena版本的开发周期中也减少了以往版本积累的一些技术债：</strong></p><ul><li><strong>Cinder</strong>已删除长期弃用的Block Storage API version 2</li><li><strong>Cyborg</strong>重构了文档结构，包括API文档、用户指南和贡献者指南</li><li><strong>Horizon</strong>及所有的Horizon插件现已支持node.js14，这是当前node.js的LTS版本</li><li><strong>Neutron</strong>新增一个配额驱动程序DbQuotaNoLockDriver，该驱动程序不会为每一个资源创建单独的锁定进程，如果服务器请求数超过已解析资源创建的数量，此类锁定可能会导致数据库死锁</li><li><strong>OpenStack-Ansible</strong>现已采用ceph-ansible 6.0（Pacific），Ansible版本已更新至ansible-core 2.11</li></ul><p>后续，本站点所有与OpenStack相关的技术类文章，默认情况下均是基于此版本进行讨论的，如有例外会进行特别声明。</p>]]></content>
    
    
    <categories>
      
      <category>OpenStack</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>自定义 Hexo 首页文章描述的显示内容</title>
    <link href="/article/2118283419.html"/>
    <url>/article/2118283419.html</url>
    
    <content type="html"><![CDATA[<p>Hexo网站首页会默认摘取文章前N个字符的文字作为摘要显示，这种处理机制比较死板，排版会变得很难看，而且也无法让读者直观地了解文章主旨。</p><p>因此，可以在文章的front-matter中添加description字段，来自定义内容作为文章摘要显示。</p><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><span class="hljs-attr">date:</span> <span class="hljs-number">20220</span><span class="hljs-number">-12</span><span class="hljs-number">-12</span> <span class="hljs-number">23</span><span class="hljs-string">:55:55</span><span class="hljs-attr">description:</span> <span class="hljs-string">这里是显示在首页的概述，正文内容均会被隐藏。</span><span class="hljs-meta">---</span></code></pre></div><p>这样可以有效美化首页排版，优化呈现的内容。</p>]]></content>
    
    
    <categories>
      
      <category>博客运营</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu16.04 安装 ConnectX-4 Lx 网卡驱动</title>
    <link href="/article/104964077.html"/>
    <url>/article/104964077.html</url>
    
    <content type="html"><![CDATA[<h3 id="0x00-下载并解压缩-Mellanox-网卡的驱动"><a href="#0x00-下载并解压缩-Mellanox-网卡的驱动" class="headerlink" title="0x00 下载并解压缩 Mellanox 网卡的驱动"></a>0x00 下载并解压缩 Mellanox 网卡的驱动</h3><p><img src="https://pic.imgdb.cn/item/6114c7555132923bf892024b.png" alt="在 Mellanox 官网下载当前操作系统对应版本驱动"></p><p>首先，需要到 Mellanox 官网下载当前操作系统对应版本驱动。</p><p>链接：<a href="https://www.mellanox.com/products/infiniband-drivers/linux/mlnx_ofed">https://www.mellanox.com/products/infiniband-drivers/linux/mlnx_ofed</a></p><div class="hljs code-wrapper"><pre><code class="hljs shell">root@Super-Server:~# tar xvf MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64.tgzroot@Super-Server:~# lltotal 832296drwx------ 26 root root      4096 8月  12 11:51 ./drwxr-xr-x 24 root root      4096 7月  13 18:17 ../drwxr-xr-x  5 root root      4096 7月   3 11:10 MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64/-rw-r--r--  1 root root 330339588 8月  12 11:51 MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64.tgzroot@Super-Server:~# cd MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64/root@Super-Server:~/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64# lltotal 300drwxr-xr-x  5 root root   4096 7月   3 11:10 ./drwx------ 26 root root   4096 8月  12 11:51 ../-rw-r--r--  1 root root      7 7月   3 11:09 .arch-rwxr-xr-x  1 root root   3077 7月   3 11:09 common_installers.pl*-rwxr-xr-x  1 root root  20656 7月   3 11:09 common.pl*-rwxr-xr-x  1 root root  24396 7月   3 11:09 create_mlnx_ofed_installers.pl*drwxr-xr-x  2 root root  12288 7月   3 11:11 DEBS/-rw-r--r--  1 root root     12 7月   3 11:09 distrodrwxr-xr-x  6 root root   4096 7月   3 11:09 docs/-rw-r--r--  1 root root    956 7月   3 11:09 LICENSE-rw-r--r--  1 root root     12 7月   3 11:09 .mlnx-rwxr-xr-x  1 root root  20727 7月   3 11:09 mlnx_add_kernel_support.sh*-rwxr-xr-x  1 root root 165777 7月   3 11:09 mlnxofedinstall*-rw-r--r--  1 root root   2764 7月   3 11:10 RPM-GPG-KEY-Mellanoxdrwxr-xr-x  2 root root   4096 7月   3 11:09 src/-rwxr-xr-x  1 root root  12200 7月   3 11:09 uninstall.sh*root@Super-Server:~/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64#</code></pre></div><h3 id="0x01-生成适配当前系统的驱动包"><a href="#0x01-生成适配当前系统的驱动包" class="headerlink" title="0x01 生成适配当前系统的驱动包"></a>0x01 生成适配当前系统的驱动包</h3><div class="hljs code-wrapper"><pre><code class="hljs shell">root@Super-Server:~/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64# ./mlnx_add_kernel_support.sh -m /root/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64 -vUsing provided distro: ubuntu16.04Note: This program will create MLNX_OFED_LINUX TGZ for ubuntu16.04 under /tmp directory.Do you want to continue?[y/N]:ySee log file /tmp/mlnx_iso.503_logs/mlnx_ofed_iso.503.logDetected MLNX_OFED_LINUX-5.4-1.0.3.0Running /bin/rm -rf /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-extRunning cp -a /root/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64 /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-extChecking if all needed packages are installed...Running tar xzf /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext/src/MLNX_OFED_SRC-5.4-1.0.3.0.tgzBuilding MLNX_OFED_LINUX DEBS . Please wait...Running MLNX_OFED_SRC-5.4-1.0.3.0/install.pl --tmpdir /tmp/mlnx_iso.503_logs --kernel-only --kernel 4.15.0-142-generic --kernel-sources /lib/modules/4.15.0-142-generic/build/ --builddir /tmp/mlnx_iso.503 --without-dkms --build-onlyRunning install -m 0644 MLNX_OFED_SRC-5.4-1.0.3.0/DEBS/ubuntu16.04/x86_64/iser-modules_5.4-OFED.5.4.1.0.3.1.kver.4.15.0-142-generic_amd64.deb /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext/DEBSRunning install -m 0644 MLNX_OFED_SRC-5.4-1.0.3.0/DEBS/ubuntu16.04/x86_64/isert-modules_5.4-OFED.5.4.1.0.3.1.kver.4.15.0-142-generic_amd64.deb /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext/DEBSRunning install -m 0644 MLNX_OFED_SRC-5.4-1.0.3.0/DEBS/ubuntu16.04/x86_64/mlnx-nfsrdma-modules_5.4-OFED.5.4.1.0.3.1.kver.4.15.0-142-generic_amd64.deb /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext/DEBSRunning install -m 0644 MLNX_OFED_SRC-5.4-1.0.3.0/DEBS/ubuntu16.04/x86_64/mlnx-ofed-kernel-modules_5.4-OFED.5.4.1.0.3.1.kver.4.15.0-142-generic_amd64.deb /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext/DEBSRunning install -m 0644 MLNX_OFED_SRC-5.4-1.0.3.0/DEBS/ubuntu16.04/x86_64/kernel-mft-modules_4.17.0-106.kver.4.15.0-142-generic_all.deb /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext/DEBSRunning install -m 0644 MLNX_OFED_SRC-5.4-1.0.3.0/DEBS/ubuntu16.04/x86_64/mlnx-ofed-kernel-utils_5.4-OFED.5.4.1.0.3.1.kver.4.15.0-142-generic_amd64.deb /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext/DEBSRunning install -m 0644 MLNX_OFED_SRC-5.4-1.0.3.0/DEBS/ubuntu16.04/x86_64/mlnx-nvme-modules_5.4-OFED.5.4.1.0.3.1.kver.4.15.0-142-generic_amd64.deb /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext/DEBSRunning install -m 0644 MLNX_OFED_SRC-5.4-1.0.3.0/DEBS/ubuntu16.04/x86_64/knem_1.1.4.90mlnx1-OFED.5.1.2.5.0.1.kver.4.15.0-142-generic_amd64.deb /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext/DEBSRunning install -m 0644 MLNX_OFED_SRC-5.4-1.0.3.0/DEBS/ubuntu16.04/x86_64/srp-modules_5.4-OFED.5.4.1.0.3.1.kver.4.15.0-142-generic_amd64.deb /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext/DEBSRunning install -m 0644 MLNX_OFED_SRC-5.4-1.0.3.0/DEBS/ubuntu16.04/x86_64/knem-modules_1.1.4.90mlnx1-OFED.5.1.2.5.0.1.kver.4.15.0-142-generic_amd64.deb /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext/DEBSCreating metadata-rpms for 4.15.0-142-generic ...Running /usr/bin/perl /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext/create_mlnx_ofed_installers.pl --with-hpc --upstream-libs --tmpdir /tmp/mlnx_iso.503_logs --mofed /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext --rpms-tdir /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext/DEBS --output /tmp/mlnx_iso.503/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext --debian --kernel 4.15.0-142-generic --ignore-groups eth-onlyRunning apt-ftparchive packages . &gt; PackagesRunning bzip2 -kf PackagesRunning apt-ftparchive release . &gt; ReleaseRunning apt-ftparchive packages . &gt; PackagesRunning bzip2 -kf PackagesRunning apt-ftparchive release . &gt; ReleaseWARNING: If you are going to configure this package as a repository, then please noteWARNING: that it is not signed, therefore, you need to set &#x27;trusted=yes&#x27; in the sources.list file.WARNING: Example: deb [trusted=yes] file:/&lt;path to MLNX_OFED DEBS folder&gt; ./Running tar czf /tmp/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext.tgz MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-extCreated /tmp/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext.tgzroot@Super-Server:~/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64# cd /tmproot@Super-Server:/tmp# tar xvf MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext.tgzroot@Super-Server:/tmp# lltotal 327568drwxrwxrwt 13 root root     86016 8月  12 13:39 ./drwxr-xr-x 24 root root      4096 7月  13 18:17 ../drwxr-xr-x  5 root root      4096 7月   3 11:10 MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext/-rw-r--r--  1 root root 335246877 8月  12 12:15 MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext.tgzroot@Super-Server:/tmp#</code></pre></div><p>驱动包生成工具的使用帮助文档：</p><div class="hljs code-wrapper"><pre><code class="hljs shell">root@Super-Server:/tmp# cd /root/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64/root@Super-Server:~/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64# ./mlnx_add_kernel_support.sh --help Usage: mlnx_add_kernel_support.sh -m|--mlnx_ofed &lt;path to MLNX_OFED/mlnx-en directory&gt; [--make-iso|--make-tgz][--make-iso]                    Create MLNX_OFED/mlnx-en ISO image.[--make-tgz]                    Create MLNX_OFED/mlnx-en tarball. (Default)[-t|--tmpdir &lt;temp work dir&gt;]                           Temp work directory (Default: /tmp)[-k | --kernel]&lt;kernel version&gt;Kernel version to use.[-s | --kernel-sources] &lt;path to the kernel sources&gt;Path to kernel headers.[--ofed-sources] &lt;path to tgz&gt;Path to OFED sources tgz package.[-v|--verbose][-n|--name]Name of the package to be created.[-y|--yes]Answer &quot;yes&quot; to all questions[--force]Force removing packages that depends on MLNX_OFED/mlnx-en[--skip-repo]Do not create a repository from MLNX_OFED/mlnx-en rpms.[--without-&lt;package&gt;]Do not build/install given package (or module).root@Super-Server:~/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64# cd /tmproot@Super-Server:/tmp#</code></pre></div><h3 id="0x02-安装驱动"><a href="#0x02-安装驱动" class="headerlink" title="0x02 安装驱动"></a>0x02 安装驱动</h3><div class="hljs code-wrapper"><pre><code class="hljs shell">root@Super-Server:/tmp# cd MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext/root@Super-Server:/tmp/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext# lltotal 388drwxr-xr-x  5 root root   4096 7月   3 11:10 ./drwxrwxrwt 13 root root  86016 8月  12 14:09 ../-rw-r--r--  1 root root      7 7月   3 11:09 .arch-rwxr-xr-x  1 root root   3077 7月   3 11:09 common_installers.pl*-rwxr-xr-x  1 root root  20656 7月   3 11:09 common.pl*-rwxr-xr-x  1 root root  24396 7月   3 11:09 create_mlnx_ofed_installers.pl*drwxr-xr-x  2 root root  16384 8月  12 12:15 DEBS/-rw-r--r--  1 root root     12 7月   3 11:09 distrodrwxr-xr-x  6 root root   4096 7月   3 11:09 docs/-rw-r--r--  1 root root    956 7月   3 11:09 LICENSE-rw-r--r--  1 root root     12 7月   3 11:09 .mlnx-rwxr-xr-x  1 root root  20727 7月   3 11:09 mlnx_add_kernel_support.sh*-rwxr-xr-x  1 root root 165777 7月   3 11:09 mlnxofedinstall*-rw-r--r--  1 root root   2764 7月   3 11:10 RPM-GPG-KEY-Mellanoxdrwxr-xr-x  2 root root   4096 7月   3 11:09 src/-rwxr-xr-x  1 root root  12200 7月   3 11:09 uninstall.sh*root@Super-Server:/tmp/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext# ./mlnxofedinstall Logs dir: /tmp/MLNX_OFED_LINUX.6015.logsGeneral log file: /tmp/MLNX_OFED_LINUX.6015.logs/general.logBelow is the list of MLNX_OFED_LINUX packages that you have chosen(some may have been added by the installer due to package dependencies):ofed-scriptsmlnx-toolsmlnx-ofed-kernel-utilsmlnx-ofed-kernel-modulesiser-modulesisert-modulessrp-modulesrdma-corelibibverbs1ibverbs-utilsibverbs-providerslibibverbs-devlibibverbs1-dbglibibumad3libibumad-devibacmlibrdmacm1rdmacm-utilslibrdmacm-devmstflintibdumplibibmad5libibmad-devlibopensmopensmopensm-doclibopensm-devellibibnetdisc5infiniband-diagsmftkernel-mft-modulesperftestibutils2ar-mgrdump-pribsimibsim-docucxsharphcollopenmpimpitestsknem-moduleslibdapl2dapl2-utilslibdapl-devdpcpsrptoolsmlnx-ethtoolmlnx-iproute2rshimneohost-backendneohost-sdkThis program will install the MLNX_OFED_LINUX package on your machine.Note that all other Mellanox, OEM, OFED, RDMA or Distribution IB packages will be removed.Those packages are removed due to conflicts with MLNX_OFED_LINUX, do not reinstall them.Do you want to continue?[y/N]:yChecking SW Requirements...Removing old packages...Installing new packagesInstalling ofed-scripts-5.4...Installing mlnx-tools-5.2.0...Installing mlnx-ofed-kernel-utils-5.4...Installing mlnx-ofed-kernel-modules-5.4...Installing iser-modules-5.4...Installing isert-modules-5.4...Installing srp-modules-5.4...Installing rdma-core-54mlnx1...Installing libibverbs1-54mlnx1...Installing ibverbs-utils-54mlnx1...Installing ibverbs-providers-54mlnx1...Installing libibverbs-dev-54mlnx1...Installing libibverbs1-dbg-54mlnx1...Installing libibumad3-54mlnx1...Installing libibumad-dev-54mlnx1...Installing ibacm-54mlnx1...Installing librdmacm1-54mlnx1...Installing rdmacm-utils-54mlnx1...Installing librdmacm-dev-54mlnx1...Installing mstflint-4.16.0...Installing ibdump-6.0.0...Installing libibmad5-54mlnx1...Installing libibmad-dev-54mlnx1...Installing libopensm-5.9.0.MLNX20210617.c9f2ade...Installing opensm-5.9.0.MLNX20210617.c9f2ade...Installing opensm-doc-5.9.0.MLNX20210617.c9f2ade...Installing libopensm-devel-5.9.0.MLNX20210617.c9f2ade...Installing libibnetdisc5-54mlnx1...Installing infiniband-diags-54mlnx1...Installing mft-4.17.0...Installing kernel-mft-modules-4.17.0...Installing perftest-4.5...Installing ibutils2-2.1.1...Installing ar-mgr-1.0...Installing dump-pr-1.0...Installing ibsim-0.10...Installing ibsim-doc-0.10...Installing ucx-1.11.0...Installing sharp-2.5.0.MLNX20210613.83fe753...Installing hcoll-4.7.3199...Installing openmpi-4.1.2a1...Installing mpitests-3.2.20...Installing knem-modules-1.1.4.90mlnx1...Installing libdapl2-2.1.10.1.mlnx...Installing dapl2-utils-2.1.10.1.mlnx...Installing libdapl-dev-2.1.10.1.mlnx...Installing dpcp-1.1.12...Installing srptools-54mlnx1...Installing mlnx-ethtool-5.10...Installing mlnx-iproute2-5.11.0...Installing rshim-2.0.6...Installing neohost-backend-1.5.0...Installing neohost-sdk-1.5.0...Selecting previously unselected package mlnx-fw-updater.(Reading database ... 240265 files and directories currently installed.)Preparing to unpack .../mlnx-fw-updater_5.4-1.0.3.0_amd64.deb ...Unpacking mlnx-fw-updater (5.4-1.0.3.0) ...Setting up mlnx-fw-updater (5.4-1.0.3.0) ...Added &#x27;RUN_FW_UPDATER_ONBOOT=no to /etc/infiniband/openib.confInitializing...Attempting to perform Firmware update...Querying Mellanox devices firmware ...Device #1:----------  Device Type:      ConnectX4LX  Part Number:      MCX4121A-ACA_Ax  Description:      ConnectX-4 Lx EN network interface card; 25GbE dual-port SFP28; PCIe3.0 x8; ROHS R6  PSID:             MT_2420110034  PCI Device Name:  01:00.0  Base MAC:         b8599fc773ca  Versions:         Current        Available          FW             14.28.2006     14.31.1014         PXE            3.6.0102       3.6.0403           UEFI           14.21.0017     14.24.0013      Status:           Update required---------Found 1 device(s) requiring firmware update...Device #1: Updating FW ...     Querying Mellanox devices firmware ...Device #1:----------  Device Type:      ConnectX4LX  Part Number:      MCX4121A-ACA_Ax  Description:      ConnectX-4 Lx EN network interface card; 25GbE dual-port SFP28; PCIe3.0 x8; ROHS R6  PSID:             MT_2420110034  PCI Device Name:  09:00.0  Base MAC:         b8599f3b57b6  Versions:         Current        Available          FW             14.31.1014     14.31.1014         PXE            3.6.0403       3.6.0403           UEFI           14.24.0013     14.24.0013      Status:           Up to dateLog File: /tmp/xsQgq1zxi4-W- DMA burning is not supported due to BME is unset (Bus Master Enable).FSMST_INITIALIZE -   OK          Writing Boot image component -   OK                                                                                                                                DoneRestart needed for updates to take effect.Log File: /tmp/7vKME08X_vReal log file: /tmp/MLNX_OFED_LINUX.6015.logs/fw_update.logDevice (01:00.0):01:00.0 Ethernet controller: Mellanox Technologies MT27710 Family [ConnectX-4 Lx]Link Width: x8PCI Link Speed: 8GT/sDevice (01:00.1):01:00.1 Ethernet controller: Mellanox Technologies MT27710 Family [ConnectX-4 Lx]Link Width: x8PCI Link Speed: 8GT/sDevice (09:00.0):09:00.0 Ethernet controller: Mellanox Technologies MT27710 Family [ConnectX-4 Lx]Link Width: x4 ( WARNING - device supports x8 )PCI Link Speed: 5GT/sDevice (09:00.1):09:00.1 Ethernet controller: Mellanox Technologies MT27710 Family [ConnectX-4 Lx]Link Width: x4 ( WARNING - device supports x8 )PCI Link Speed: 5GT/sInstallation passed successfullyTo load the new driver, run:/etc/init.d/openibd restartroot@Super-Server:/tmp/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext# /etc/init.d/openibd restartUnloading HCA driver:                                      [  OK  ]Loading HCA driver and Access Layer:                       [  OK  ]root@Super-Server:/tmp/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext#</code></pre></div><h3 id="0x03-结果验证"><a href="#0x03-结果验证" class="headerlink" title="0x03 结果验证"></a>0x03 结果验证</h3><div class="hljs code-wrapper"><pre><code class="hljs shell">root@Super-Server:/tmp/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext# /etc/init.d/openibd status  HCA driver loadedConfigured Mellanox EN devices:enp9s0f0enp9s0f1ens11f0ens11f1Currently active Mellanox devices:The following OFED modules are loaded:  rdma_ucm  rdma_cm  ib_ipoib  mlx5_core  mlx5_ib  ib_uverbs  ib_umad  ib_cm  ib_core  mlxfwroot@Super-Server:/tmp/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext# lspci | grep -i ethernet01:00.0 Ethernet controller: Mellanox Technologies MT27710 Family [ConnectX-4 Lx]01:00.1 Ethernet controller: Mellanox Technologies MT27710 Family [ConnectX-4 Lx]02:00.0 Ethernet controller: Cavium, Inc. Device 9702 (rev 03)02:00.1 Ethernet controller: Cavium, Inc. Device 9702 (rev 03)03:00.0 Ethernet controller: Intel Corporation Ethernet Controller X710 for 10GbE SFP+ (rev 02)03:00.1 Ethernet controller: Intel Corporation Ethernet Controller X710 for 10GbE SFP+ (rev 02)03:00.2 Ethernet controller: Intel Corporation Ethernet Controller X710 for 10GbE SFP+ (rev 02)03:00.3 Ethernet controller: Intel Corporation Ethernet Controller X710 for 10GbE SFP+ (rev 02)07:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03)08:00.0 Ethernet controller: Intel Corporation I210 Gigabit Network Connection (rev 03)09:00.0 Ethernet controller: Mellanox Technologies MT27710 Family [ConnectX-4 Lx]09:00.1 Ethernet controller: Mellanox Technologies MT27710 Family [ConnectX-4 Lx]root@Super-Server:/tmp/MLNX_OFED_LINUX-5.4-1.0.3.0-ubuntu16.04-x86_64-ext# cdroot@Super-Server:~# ethtool enp9s0f0Settings for enp9s0f0:Supported ports: [ FIBRE ]Supported link modes:   1000baseKX/Full                         10000baseKR/Full                         25000baseCR/Full                         25000baseKR/Full                         25000baseSR/Full Supported pause frame use: SymmetricSupports auto-negotiation: YesSupported FEC modes: None BaseR RSAdvertised link modes:  1000baseKX/Full                         10000baseKR/Full                         25000baseCR/Full                         25000baseKR/Full                         25000baseSR/Full Advertised pause frame use: SymmetricAdvertised auto-negotiation: YesAdvertised FEC modes: NoneSpeed: 25000Mb/sDuplex: FullPort: FIBREPHYAD: 0Transceiver: internalAuto-negotiation: onSupports Wake-on: dWake-on: dCurrent message level: 0x00000004 (4)       linkLink detected: yesroot@Super-Server:~# ethtool enp9s0f1Settings for enp9s0f1:Supported ports: [ FIBRE ]Supported link modes:   1000baseKX/Full                         10000baseKR/Full                         25000baseCR/Full                         25000baseKR/Full                         25000baseSR/Full Supported pause frame use: SymmetricSupports auto-negotiation: YesSupported FEC modes: None BaseR RSAdvertised link modes:  1000baseKX/Full                         10000baseKR/Full                         25000baseCR/Full                         25000baseKR/Full                         25000baseSR/Full Advertised pause frame use: SymmetricAdvertised auto-negotiation: YesAdvertised FEC modes: RSLink partner advertised link modes:  Not reportedLink partner advertised pause frame use: NoLink partner advertised auto-negotiation: YesLink partner advertised FEC modes: Not reportedSpeed: 25000Mb/sDuplex: FullPort: FIBREPHYAD: 0Transceiver: internalAuto-negotiation: onSupports Wake-on: dWake-on: dCurrent message level: 0x00000004 (4)       linkLink detected: yesroot@Super-Server:~#</code></pre></div>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用 rsync 实现生产数据的增量备份</title>
    <link href="/article/2279620328.html"/>
    <url>/article/2279620328.html</url>
    
    <content type="html"><![CDATA[<h3 id="0x01-使用实例"><a href="#0x01-使用实例" class="headerlink" title="0x01 使用实例"></a>0x01 使用实例</h3><p>利用rsync完成增量备份的脚本：</p><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@yunwei-beifen beifen]# cat beifen-tool/rsync-100-20-**-**.sh<span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>execute_id=`uuidgen`log_file=&quot;/nfsc/pocdev_vol_000094/beifen-data/100-20-**-**-log.d/`date &#x27;+%Y%m%d&#x27;`-execute.log&quot;echo &#x27;Rsync script started time is :&#x27; `date` $execute_id &gt;&gt; $log_file<span class="hljs-meta"></span><span class="hljs-meta">#</span><span class="bash">删除DST端中在SRC已经删除或者不存在的目录，同时排除LOG目录，以降低备份服务器硬盘空间的占用</span>rsync -azuv --exclude-from=&#x27;./rsync-100-20-**-**-Exclude.list&#x27; --bwlimit=1024 --delete --delete-after root@100.20.**.**:/home/admin /root/beifen/beifen-data/100-20-**-** &gt;&gt; $log_fileecho &#x27;Rsync script finished time is :&#x27; `date` $execute_id &gt;&gt; $log_file[root@yunwei-beifen beifen]#</code></pre></div><p>日志目录排除清单：</p><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@yunwei-beifen beifen]# cat beifen-tool/rsync-100-20-**-**-Exclude.list www/data/administrator/logs...atlassian/******/logs....jenkins/logs...[root@yunwei-beifen beifen]#</code></pre></div><p>定时任务设置：</p><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@yunwei-beifen beifen]# crontab -l30 02 * * * /bin/bash /nfsc/pocdev_vol_000094/beifen-tool/rsync-100-20-**-**.sh &amp;&gt; /dev/zero[root@yunwei-beifen beifen]#</code></pre></div><p>上述的脚本和定时任务配置，达到的效果是：在每天的凌晨两点半，开始比较备份服务器与生产服务器的数据（排除无用且数据量较大的日志），并按照对比的结果，将生产服务器昨日新产生的数据同步到备份服务器中，将生产服务器中已经删除的文件也在备份服务器中删除掉，以保证两端数据完全相同，同时输出同步日志到备份服务器相应的目录。备份机是私有云中的一台虚拟机，备份数据会写入到私有云中的NAS存储，备份脚本与日志也都保存在NAS存储中。</p><h3 id="0x02-参数解释"><a href="#0x02-参数解释" class="headerlink" title="0x02 参数解释"></a>0x02 参数解释</h3><p>这里只简要解释脚本中使用到的rsync参数：</p><blockquote><p>rsync -azuv SRC/ DST/ ：把SRC目录中的文件，同步到DST目录中。</p></blockquote><table><thead><tr><th>参数</th><th>作用解释</th></tr></thead><tbody><tr><td>-a</td><td>保留被同步文件的所有元数据，并递归</td></tr><tr><td>-z</td><td>传输文件时进行压缩以节省带宽</td></tr><tr><td>-u</td><td>跳过目标目录中更新的文件</td></tr><tr><td>-v</td><td>输出同步的细节</td></tr><tr><td>–exclude-from=’./rsync-100-20-**-**-Exclude.list’</td><td>从指定文件中读取需要排除的目录、文件</td></tr><tr><td>–bwlimit=1024</td><td>限速传输，单位为KB/s</td></tr><tr><td>–delete</td><td>删除目标目录比源目录多余的文件</td></tr><tr><td>–delete-after</td><td>定义–delete动作的执行时机，即在所有文件传输完成后开始删除</td></tr><tr><td>–progress</td><td>在传输过程中显示进度</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>王垠-如何掌握所有的程序语言</title>
    <link href="/article/657609840.html"/>
    <url>/article/657609840.html</url>
    
    <content type="html"><![CDATA[<hr><p>本篇博文转载自博客网站：<a href="http://www.yinwang.org/">当然我在扯淡</a>，经研读思考后觉得受益良多，特此转载收藏！</p><p>原文连接：<a href="http://www.yinwang.org/blog-cn/2017/07/06/master-pl">http://www.yinwang.org/blog-cn/2017/07/06/master-pl</a></p><p>原文作者：王垠</p><p>声明：此次转载，不会对原文内容做任何修改，如涉及作品内容、版权和其它问题，请联系我删除此篇转载文章。</p><hr><h3 id="如何掌握所有的程序语言"><a href="#如何掌握所有的程序语言" class="headerlink" title="如何掌握所有的程序语言"></a>如何掌握所有的程序语言</h3><p>对的，我这里要讲的不是如何掌握一种程序语言，而是所有的……</p><p>很多编程初学者至今还在给我写信请教，问我该学习什么程序语言，怎么学习。由于我知道如何掌握“所有”的程序语言，总是感觉这种该学“一种”什么语言的问题比较低级，所以一直没来得及回复他们 :P 可是逐渐的，我发现原来不只是小白们有这个问题，就连美国大公司的很多资深工程师，其实也没搞明白。</p><p>今天我有动力了，想来统一回答一下这个搁置已久的“初级问题”。类似的话题貌似曾经写过，然而现在我想把它重新写一遍。因为在跟很多人交流之后，我对自己头脑中的（未转化为语言的）想法，有了更精准的表达。</p><p>如果你存在以下的种种困惑，那么这篇文章也许会对你有所帮助：</p><ol><li> 你是编程初学者，不知道该选择什么程序语言来入门。</li><li> 你是资深的程序员或者团队领导，对新出现的种种语言感到困惑，不知道该“投资”哪种语言。</li><li> 你的团队为使用哪种程序语言争论不休，发生各种宗教斗争。</li><li> 你追逐潮流采用了某种时髦的语言，结果两个月之后发现深陷泥潭，痛苦不堪……</li></ol><p>虽然我已经不再过问这些世事，然而无可置疑的现实是，程序语言仍然是很重要的话题，这个情况短时间内不会改变。程序员的岗位往往会要求熟悉某些语言，甚至某些奇葩的公司要求你“深入理解 OOP 或者 FP 设计模式”。对于在职的程序员，程序语言至今仍然是可以争得面红耳赤的宗教话题。它的宗教性之强，以至于我在批评和调侃某些语言（比如 Go 语言）的时候，有些人会本能地以为我是另外一种语言（比如 Java）的粉丝。</p><p>显然我不可能是任何一种语言的粉丝，我甚至不是 Yin 语言的粉丝 ;) 对于任何从没见过的语言，我都是直接拿起来就用，而不需要经过学习的过程。看了这篇文章，也许你会明白我为什么可以达到这个效果。理解了这里面的东西，每个程序员都应该可以做到这一点。嗯，但愿吧。</p><h3 id="重视语言特性，而不是语言"><a href="#重视语言特性，而不是语言" class="headerlink" title="重视语言特性，而不是语言"></a>重视语言特性，而不是语言</h3><p>很多人在乎自己或者别人是否“会”某种语言，对“发明”了某种语言的人倍加崇拜，为各种语言的孰优孰劣争得面红耳赤。这些问题对于我来说都是不存在的。虽然我写文章批评过不少语言的缺陷，在实际工作中我却很少跟人争论这些。如果有其它人在我身边争论，我甚至会戴上耳机，都懒得听他们说什么 ;) 为什么呢？我发现归根结底的原因，是因为我重视的是“语言特性”，而不是整个的“语言”。我能用任何语言写出不错的代码，就算再糟糕的语言也差不了多少。</p><p>任何一种“语言”，都是各种“语言特性”的组合。打个比方吧，一个程序语言就像一台电脑。它的牌子可能叫“联想”，或者“IBM”，或者“Dell”，或者“苹果”。那么，你可以说苹果一定比 IBM 好吗？你不能。你得看看它里面装的是什么型号的处理器，有多少个核，主频多少，有多少 L1 cache，L2 cache……，有多少内存和硬盘，显示器分辨率有多大，显卡是什么 GPU，网卡速度，等等各种“配置”。有时候你还得看各个组件之间的兼容性。</p><p>这些配置对应到程序语言里面，就是所谓“语言特性”。举一些语言特性的例子：</p><ul><li>  变量定义</li><li>  算术运算</li><li>  for 循环语句，while 循环语句</li><li>  函数定义，函数调用</li><li>  递归</li><li>  静态类型系统</li><li>  类型推导</li><li>  lambda 函数</li><li>  面向对象</li><li>  垃圾回收</li><li>  指针算术</li><li>  goto 语句</li></ul><p>这些语言特性，就像你在选择一台电脑的时候，看它里面是什么配置。选电脑的时候，没有人会说 Dell 一定是最好的，他们只会说这个型号里面装的是 Intel 的 i7 处理器，这个比 i5 的好，DDR3 的内存 比 DDR2 的快这么多，SSD 比磁盘快很多，ATI 的显卡是垃圾…… 如此等等。</p><p>程序语言也是一样的道理。对于初学者来说，其实没必要纠结到底要先学哪一种语言，再学哪一种。曾经有人给我发信问这种问题，纠结了好几个星期，结果一个语言都还没开始学。有这纠结的时间，其实都可以把他纠结过的语言全部掌握了。</p><p>初学者往往不理解，每一种语言里面必然有一套“通用”的特性。比如变量，函数，整数和浮点数运算，等等。这些是每个通用程序语言里面都必须有的，一个都不能少。你只要通过“某种语言”学会了这些特性，掌握这些特性的根本概念，就能随时把这些知识应用到任何其它语言。你为此投入的时间基本不会浪费。所以初学者纠结要“先学哪种语言”，这种时间花的很不值得，还不如随便挑一个语言，跳进去。</p><p>如果你不能用一种语言里面的基本特性写出好的代码，那你换成另外一种语言也无济于事。你会写出一样差的代码。我经常看到有些人 Java 代码写得相当乱，相当糟糕，却骂 Java 不好，雄心勃勃要换用 Go 语言。这些人没有明白，是否能写出好的代码在于人，而不在于语言。如果你的心中没有清晰简单的思维模型，你用任何语言表述出来都是一堆乱麻。如果你 Java 代码写得很糟糕，那么你写 Go 语言代码也会一样糟糕，甚至更差。</p><p>很多初学者不了解，一个高明的程序员如果开始用一种新的程序语言，他往往不是去看这个语言的大部头手册或者书籍，而是先有一个需要解决的问题。手头有了问题，他可以用两分钟浏览一下这语言的手册，看看这语言大概长什么样。然后，他直接拿起一段例子代码来开始修改捣鼓，想法把这代码改成自己正想解决的问题。在这个简短的过程中，他很快的掌握了这个语言，并用它表达出心里的想法。</p><p>在这个过程中，随着需求的出现，他可能会问这样的问题：</p><ul><li>  这个语言的“变量定义”是什么语法，需要“声明类型”吗，还是可以用“类型推导”？</li><li>  它的“类型”是什么语法？是否支持“泛型”？泛型的 “variance” 如何表达？</li><li>  这个语言的“函数”是什么语法，“函数调用”是什么语法，可否使用“缺省参数”？</li><li>  ……</li></ul><p>注意到了吗？上面每一个引号里面的内容，都是一种语言特性（或者叫概念）。这些概念可以存在于任何的语言里面，虽然语法可能不一样，它们的本质都是一样的。比如，有些语言的参数类型写在变量前面，有些写在后面，有些中间隔了一个冒号，有些没有。</p><p>这些实际问题都是随着写实际的代码，解决手头的问题，自然而然带出来的，而不是一开头就抱着语言手册看得仔仔细细。因为掌握了语言特性的人都知道，自己需要的特性，在任何语言里面一定有对应的表达方式。如果没有直接的方式表达，那么一定有某种“绕过方式”。如果有直接的表达方式，那么它只是语法稍微有所不同而已。所以，他是带着问题找特性，就像查字典一样，而不是被淹没于大部头的手册里面，昏昏欲睡一个月才开始写代码。</p><p>掌握了通用的语言特性，剩下的就只剩某些语言“特有”的特性了。研究语言的人都知道，要设计出新的，好的，无害的特性，是非常困难的。所以一般说来，一种好的语言，它所特有的新特性，终究不会超过一两种。如果有个语言号称自己有超过 5 种新特性，那你就得小心了，因为它们带来的和可能不是优势，而是灾难！</p><p>同样的道理，最好的语言研究者，往往不是某种语言的设计者，而是某种关键语言特性的设计者（或者支持者）。举个例子，著名的计算机科学家 Dijkstra 就是“递归”的强烈支持者。现在的语言里面都有递归，然而你可能不知道，早期的程序语言是不支持递归的。直到 Dijkstra 强烈要求 Algol 60 委员会加入对递归的支持，这个局面才改变了。Tony Hoare 也是语言特性设计者。他设计了几个重要的语言特性，却没有设计过任何语言。另外大家不要忘了，有个语言专家叫王垠，他是早期 union type 的支持者和实现者，也是 checked exception 特性的支持者，他在自己的<a href="http://www.yinwang.org/blog-cn/2017/05/23/kotlin">博文</a>里指出了 checked exception 和 union type 之间的关系 :P</p><p>很多人盲目的崇拜语言设计者，只要听到有人设计（或者美其民曰“发明”）了一个语言，就热血沸腾，佩服的五体投地。他们却没有理解，其实所有的程序语言，不过是像 Dell，联想一样的“组装机”。语言特性的设计者，才是像 Intel，AMD，ARM，Qualcomm 那样核心技术的创造者。</p><h3 id="合理的入门语言"><a href="#合理的入门语言" class="headerlink" title="合理的入门语言"></a>合理的入门语言</h3><p>所以初学者要想事半功倍，就应该从一种“合理”的，没有明显严重问题的语言出发，掌握最关键的语言特性，然后由此把这些概念应用到其它语言。哪些是合理的入门语言呢？我个人觉得这些语言都可以用来入门：</p><ul><li>  Scheme</li><li>  C</li><li>  Java</li><li>  Python</li><li>  JavaScript</li></ul><p>那么相比之下，我不推荐用哪些语言入门呢？</p><ul><li>  Shell</li><li>  PowerShell</li><li>  AWK</li><li>  Perl</li><li>  PHP</li><li>  Basic</li><li>  Go</li><li>  Rust</li></ul><p>总的说来，你不应该使用所谓“<a href="http://www.yinwang.org/blog-cn/2013/03/29/scripting-language">脚本语言</a>”作为入门语言，特别是那些源于早期 Unix 系统的脚本语言工具。PowerShell 虽然比 Unix 的 Shell 有所进步，然而它仍然没有摆脱脚本语言的根本问题——他们的设计者不知道他们自己在干什么 :P</p><p>采用脚本语言学编程，一个很严重的问题就是使得学习者抓不住关键。脚本语言往往把一些系统工具性质的东西（比如正则表达式，Web 概念）加入到语法里面，导致初学者为它们浪费太多时间，却没有理解编程最关键的概念：变量，函数，递归，类型……</p><p>不推荐 Go 语言的原因类似，虽然 Go 语言不算脚本语言，然而他的设计者显然不明白自己在干什么。所以使用 Go 语言来学编程，你不能专注于最关键，最好的语言特性。关于 Go 语言的各种毛病，你可以参考这篇<a href="http://www.yinwang.org/blog-cn/2014/04/18/golang">文章</a>。</p><p>同样的，我不觉得 Rust 适合作为入门语言。Rust 花了太大精力来夸耀它的“新特性”，而这些新特性不但不是最关键的部分，而且很多是有问题的。初学者过早的关注这些特性，不仅学不会最关键的编程思想，而且可能误入歧途。关于 Rust 的一些问题，你可以参考这篇<a href="http://www.yinwang.org/blog-cn/2016/09/18/rust">文章</a>。</p><h3 id="掌握关键语言特性，忽略次要特性"><a href="#掌握关键语言特性，忽略次要特性" class="headerlink" title="掌握关键语言特性，忽略次要特性"></a>掌握关键语言特性，忽略次要特性</h3><p>为了达到我之前提到的融会贯通，一通百通的效果，初学者应该专注于语言里面最关键的特性，而不是被次要的特性分心。</p><p>举个夸张点的例子。我发现很多编程培训班和野鸡大学的编程入门课，往往一来就教学生如何使用 printf 打印“Hello World！”，进而要他们记忆 printf 的各种“格式字符”的意义，要他们实现各种复杂格式的打印输出，甚至要求打印到文本文件里，然后再读出来……</p><p>可是殊不知，这种输出输入操作其实根本不算是语言的一部分，而且对于掌握编程的核心概念来说，都是次要的。有些人的 Java 课程进行了好几个星期，居然还在布置各种 printf 的作业。学生写出几百行的 printf，却不理解变量和函数是什么，甚至连算术语句和循环语句都不知道怎么用！这就是为什么很多初学者感觉编程很难，我连 <code>%d</code>，<code>%f</code>，<code>%.2f</code> 的含义都记不住，还怎么学编程！</p><p>然而这些野鸡大学的“教授”头衔是如此的洗脑，以至于被他们教过的学生（比如我女朋友）到我这里请教，居然骂我净教一些没用的东西，学了连 printf 的作业都没法完成 :P 你别跟我讲 for 循环，函数什么的了…… 可不可以等几个月，等我背熟了 printf 的用法再学那些啊？</p><p>所以你就发现一旦被差劲的老师教过，这个程序员基本就毁了。就算遇到好的老师，他们也很难纠正过来。</p><p>当然这是一个夸张的例子，因为 printf 根本不算是语言特性，但这个例子从同样的角度说明了次要肤浅的语言特性带来的问题。</p><p>这里举一些次要语言特性的例子：</p><ul><li>  C 语言的语句块，如果里面只有一条语句，可以不打花括号。</li><li>  Go 语言的函数参数类型如果一样可以合并在一起写，比如 <code>func foo(s string, x, y, z int, c bool) &#123; ... &#125;</code></li><li>  Perl 把正则表达式作为语言的一种特殊语法</li><li>  JavaScript 语句可以在某些时候省略句尾的分号</li><li>  Haskell 和 ML 等语言的 <a href="http://www.yinwang.org/blog-cn/2013/04/02/currying">currying</a></li></ul><h3 id="自己动手实现语言特性"><a href="#自己动手实现语言特性" class="headerlink" title="自己动手实现语言特性"></a>自己动手实现语言特性</h3><p>在基本学会了各种语言特性，能用它们来写代码之后，下一步的进阶就是去实现它们。只有实现了各种语言特性，你才能完全地拥有它们，成为它们的主人。否则你就只是它们的使用者，你会被语言的设计者牵着鼻子走。</p><p>有个大师说得好，完全理解一种语言最好的方法就是自己动手实现它，也就是自己写一个解释器来实现它的语义。但我觉得这句话应该稍微修改一下：完全理解一种“语言特性”最好的方法就是自己亲自实现它。</p><p>注意我在这里把“语言”改为了“语言特性”。你并不需要实现整个语言来达到这个目的，因为我们最终使用的是语言特性。只要你自己实现了一种语言特性，你就能理解这个特性在任何语言里的实现方式和用法。</p><p>举个例子，学习 SICP 的时候，大家都会亲自用 Scheme 实现一个面向对象系统。用 Scheme 实现的面向对象系统，跟 Java，C++，Python 之类的语言语法相去甚远，然而它却能帮助你理解任何这些 OOP 语言里面的“面向对象”这一概念，它甚至能帮助你理解各种面向对象实现的差异。</p><p>这种效果是你直接学习 OOP 语言得不到的，因为在学习 Java，C++，Python 之类语言的时候，你只是一个用户，而用 Scheme 自己动手实现了 OO 系统之后，你成为了一个创造者。</p><p>类似的特性还包括类型推导，类型检查，惰性求值，如此等等。我实现过几乎所有的语言特性，所以任何语言在我的面前，都是可以被任意拆卸组装的玩具，而不再是凌驾于我之上的神圣。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>写了这么多，重要的话重复三遍：语言特性，语言特性，语言特性，语言特性！不管是初学者还是资深程序员，应该专注于语言特性，而不是纠结于整个的“语言品牌”。只有这样才能达到融会贯通，拿起任何语言几乎立即就会用，并且写出高质量的代码。</p><p>（如果你觉得这篇文章有所帮助，可以<a href="http://www.yinwang.org/blog-cn/2016/04/13/pay-blog">付款</a>购买，价格随意。）</p>]]></content>
    
    
    
    <tags>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用7年的笔记本保养升级</title>
    <link href="/article/2080221565.html"/>
    <url>/article/2080221565.html</url>
    
    <content type="html"><![CDATA[<h3 id="2021-01-10"><a href="#2021-01-10" class="headerlink" title="2021-01-10"></a>2021-01-10</h3><p>2014年高考结束购入的战神K660ED4已经不堪重负，经过六年服役早已伤痕累累，期间升级了屏幕、硬盘、内存、散热等，到目前机器配置如下：</p><ul><li>CPU i7 4700HQ</li><li>GPU GTX860M</li><li>MEM 24GB</li><li>DISK 240G固态+120G固态+1T机械</li><li>三块硬盘用于：系统盘、软件盘、资料盘</li></ul><p>目前，老战神存在的问题是：操作系统方面已连轴转了接近4年，软件和数据逐渐膨胀，已经占用了90%空间，导致固态和机械硬盘掉速严重；触控板按键被异物卡死；开机键断裂，容易误触关机；摄像头无法使用，怀疑是排线问题；散热拉垮，轻负载待机温度高达90度，开机即起飞，移动鼠标都能引起风扇狂转。</p><p>于是，周末简单清灰、检查散热情况后，决定开始翻新升级老战神，暂定包括电脑C面、网卡、检修摄像头、更换全新的散热模组、改装水冷、维修触摸板等。</p><p>动手前的拍照留念：</p><p><img src="https://img.imgdb.cn/item/606ab3438322e6675c64eff5.jpg"></p><p><img src="https://img.imgdb.cn/item/606ab3438322e6675c64efea.jpg"></p><p><img src="https://img.imgdb.cn/item/606ab3308322e6675c64ddbc.jpg"></p><p><img src="https://img.imgdb.cn/item/606ab3438322e6675c64efef.jpg"></p><p><img src="https://img.imgdb.cn/item/606ab3308322e6675c64ddb7.jpg"></p><p><img src="https://img.imgdb.cn/item/606ab3308322e6675c64ddb5.jpg"></p><h3 id="2021-01-11"><a href="#2021-01-11" class="headerlink" title="2021-01-11"></a>2021-01-11</h3><p>彻底拆解完毕，开始思考是否换全套外壳，彻彻底底翻新机器外观，裸板如下图，不知道是不是因为日久生情，总觉得板子是如此的漂亮。</p><p><img src="https://img.imgdb.cn/item/606abda78322e6675c7101ef.jpg"></p><h3 id="2021-01-13"><a href="#2021-01-13" class="headerlink" title="2021-01-13"></a>2021-01-13</h3><p>笔记本外壳，键盘压条缺货，完美主义作祟，放弃原汁原味复刻翻新，开始搞DIY！测试老散热器的散热铜管导热情况，使用开水加手摸，哈哈哈哈……</p><p><img src="https://img.imgdb.cn/item/606ab8e28322e6675c6bc8a4.jpg"></p><h3 id="2021-01-20"><a href="#2021-01-20" class="headerlink" title="2021-01-20"></a>2021-01-20</h3><p>不带壳组装好，检测各个零部件以及排线经过拆解是否完好。结果，操他大爷的，吃外卖过程中打翻汤汁，无奈之下开始水洗主板。</p><p><img src="https://img.imgdb.cn/item/606abae58322e6675c6e1e3a.jpg"></p><p><img src="https://img.imgdb.cn/item/606ab7f68322e6675c6ad3fc.png"></p><h3 id="2021-02-26"><a href="#2021-02-26" class="headerlink" title="2021-02-26"></a>2021-02-26</h3><p>水洗主板前用酒精清理，无法开机，主板部分芯片发烫，于是水洗后用暖气片烤干，结果仍无法开机。惊喜的是经过一个年假的阴干静置后竟然好了，成功点亮！</p><p><img src="https://img.imgdb.cn/item/606abb5d8322e6675c6e9eb8.png"></p><h3 id="2021-03-02"><a href="#2021-03-02" class="headerlink" title="2021-03-02"></a>2021-03-02</h3><p>散热改装完毕，开始烤机测试！</p><p><img src="https://img.imgdb.cn/item/606abb958322e6675c6ed9ba.png"></p><h3 id="2021-04-05"><a href="#2021-04-05" class="headerlink" title="2021-04-05"></a>2021-04-05</h3><p>和老同学闹情绪了，所以，原计划自己设计的亚克力机箱的图纸暂时没法继续画了，以后再说吧，裸板用也没啥大问题，奉上成品图（暂时过渡）！</p><p><img src="https://img.imgdb.cn/item/606abd358322e6675c7085c2.jpg"></p><p><img src="https://img.imgdb.cn/item/606abd358322e6675c7085c0.jpg"></p><h3 id="费用小结"><a href="#费用小结" class="headerlink" title="费用小结"></a>费用小结</h3><p><img src="https://img.imgdb.cn/item/606abc3e8322e6675c6f8cb0.png"></p><p>暂且告一段落，后面亚克力机箱加工完毕后，再来更新……</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在 Ubuntu 18 上安装配置代理软件</title>
    <link href="/article/3466813046.html"/>
    <url>/article/3466813046.html</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用本软件的初衷是想要解决Linux终端下HTTPS代理的问题，以保证OpenStack-Helm项目在部署期间，所需要的Docker镜像可以顺利拉取下来。目前，常用的各大代理软件少有支持HTTPS，但基本都支持SOCKS5协议，所以在应用的广泛程度上不是那么理想。例如：各移动终端、PS5之类的游戏设备都没有支持SOCKS5协议，相比而言HTTPS的代理模式被广泛支持。本文介绍的Privoxy软件就是作为代理链条上的中间层，配合Linux终端环境变量，用来将终端命令工具行产生的HTTPS、HTTP、FTP流量转为SOCKS5流量，最终再交给代理软件处理转发。</p><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>局域网中代理服务器端的IP地址：192.168.0.60（不在本文讨论范围内）</p><p>客户端操作系统：Ubuntu 18.04</p><p>客户端IP地址：192.168.2.233</p><p>系统APT源列表：</p><div class="hljs code-wrapper"><pre><code class="hljs shell">noone@noone-virtual-machine:~$ cat /etc/apt/sources.listdeb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse</code></pre></div><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><div class="hljs code-wrapper"><pre><code class="hljs shell">noone@noone-virtual-machine:~$ sudo apt-get install privoxy</code></pre></div><h3 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h3><h4 id="编辑代理软件的配置文件"><a href="#编辑代理软件的配置文件" class="headerlink" title="编辑代理软件的配置文件"></a>编辑代理软件的配置文件</h4><div class="hljs code-wrapper"><pre><code class="hljs shell">noone@noone-virtual-machine:~$ sudo vim /etc/privoxy/config......<span class="hljs-meta">#</span><span class="bash">      注释：在此处配置软件监听使用的端口号，默认使用本机的8118端口，用来接收本机转发过来的流量</span><span class="hljs-meta">#</span><span class="bash">      Suppose you are running Privoxy on an IPv6-capable machine and</span><span class="hljs-meta">#</span><span class="bash">      you want it to listen on the IPv6 address of the loopback</span><span class="hljs-meta">#</span><span class="bash">      device:</span><span class="hljs-meta">#</span><span class="bash"></span><span class="bash"><span class="hljs-comment">#        listen-address [::1]:8118</span></span><span class="hljs-meta">#</span><span class="bash"></span><span class="bash">listen-address  127.0.0.1:8118</span>listen-address  [::1]:8118<span class="hljs-meta">#</span><span class="bash"></span><span class="bash">......</span><span class="hljs-meta">#</span><span class="bash">      注释：此处的配置，是将本地转发到8118端口的流量，转发到192.168.0.60:10808，此接口是局域网中代理软件提供的</span><span class="hljs-meta">#</span><span class="bash">      To chain Privoxy and Tor, both running on the same system, you</span><span class="hljs-meta">#</span><span class="bash">      would use something like:</span><span class="hljs-meta">#</span><span class="bash"></span><span class="bash"><span class="hljs-comment">#        forward-socks5t   /               127.0.0.1:9050 .</span></span><span class="hljs-meta">#</span><span class="bash"></span><span class="bash">forward-socks5 / 192.168.0.60:10808 .</span><span class="hljs-meta">#</span><span class="bash"></span><span class="bash"><span class="hljs-comment">#      注释：此处按格式填写不想让软件进行转发代理的网段，一般情况多为本地局域网的网段</span></span><span class="hljs-meta">#</span><span class="bash">      Note that <span class="hljs-keyword">if</span> you got Tor through one of the bundles, you may</span><span class="hljs-meta">#</span><span class="bash">      have to change the port from 9050 to 9150 (or even another</span><span class="hljs-meta">#</span><span class="bash">      one). For details, please check the documentation on the Tor</span><span class="hljs-meta">#</span><span class="bash">      website.</span><span class="hljs-meta">#</span><span class="bash"></span><span class="bash"><span class="hljs-comment">#      The public Tor network can&#x27;t be used to reach your local</span></span><span class="hljs-meta">#</span><span class="bash">      network, <span class="hljs-keyword">if</span> you need to access <span class="hljs-built_in">local</span> servers you therefore</span><span class="hljs-meta">#</span><span class="bash">      might want to make some exceptions:</span><span class="hljs-meta">#</span><span class="bash"></span><span class="bash"><span class="hljs-comment">#        forward         192.168.*.*/     .</span></span><span class="hljs-meta">#</span><span class="bash">        forward            10.*.*.*/     .</span><span class="hljs-meta">#</span><span class="bash">        forward           127.*.*.*/     .</span><span class="hljs-meta">#</span><span class="bash"></span><span class="bash">forward         192.168.*.*/     .</span>forward            10.*.*.*/     .forward           127.*.*.*/     .forward           172.24.*.*/    .<span class="hljs-meta">#</span><span class="bash"></span><span class="bash">......</span><span class="hljs-meta">#</span><span class="bash">  注释：若网络不稳定，建议开启软件的转发重试功能</span><span class="hljs-meta">#</span><span class="bash">  Examples:</span><span class="hljs-meta">#</span><span class="bash"></span><span class="bash"><span class="hljs-comment">#      forwarded-connect-retries 1</span></span><span class="hljs-meta">#</span><span class="bash"></span><span class="bash">forwarded-connect-retries  1</span><span class="hljs-meta">#</span><span class="bash"></span><span class="bash">......</span></code></pre></div><h4 id="重启软件并设置为自启动"><a href="#重启软件并设置为自启动" class="headerlink" title="重启软件并设置为自启动"></a>重启软件并设置为自启动</h4><div class="hljs code-wrapper"><pre><code class="hljs shell">noone@noone-virtual-machine:~$ sudo systemctl restart privoxynoone@noone-virtual-machine:~$ sudo systemctl enable privoxynoone@noone-virtual-machine:~$ sudo systemctl status privoxy● privoxy.service - Privacy enhancing HTTP Proxy   Loaded: loaded (/lib/systemd/system/privoxy.service; enabled; vendor preset: enabled)   Active: active (running) since Wed 2021-03-24 06:29:00 CST; 3h 49min ago     Docs: man:privoxy(8)           https://www.privoxy.org/user-manual/ Main PID: 26737 (privoxy)    Tasks: 1 (limit: 4915)   CGroup: /system.slice/privoxy.service           └─26737 /usr/sbin/privoxy --pidfile /var/run/privoxy.pid --user privoxy /etc/privoxy/config3月 24 06:28:59 noone-virtual-machine systemd[1]: Starting Privacy enhancing HTTP Proxy...3月 24 06:29:00 noone-virtual-machine systemd[1]: Started Privacy enhancing HTTP Proxy.</code></pre></div><h4 id="编辑系统的环境变量"><a href="#编辑系统的环境变量" class="headerlink" title="编辑系统的环境变量"></a>编辑系统的环境变量</h4><div class="hljs code-wrapper"><pre><code class="hljs shell">noone@noone-virtual-machine:~$ vim ~/.bashrc<span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">enable</span> programmable completion features (you don<span class="hljs-string">&#x27;t need to enable</span></span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> this, if it&#x27;</span>s already enabled <span class="hljs-keyword">in</span> /etc/bash.bashrc and /etc/profile</span><span class="hljs-meta">#</span><span class="bash"> sources /etc/bash.bashrc).</span>if ! shopt -oq posix; then  if [ -f /usr/share/bash-completion/bash_completion ]; then    . /usr/share/bash-completion/bash_completion  elif [ -f /etc/bash_completion ]; then    . /etc/bash_completion  fifi<span class="hljs-meta">#</span><span class="bash"> 注释：在.bashrc文件末尾追加如下配置，使得命令行工具产生的流量转发给Privoxy软件进行处理</span>export ftp_proxy=&quot;127.0.0.1:8118&quot;export http_proxy=&quot;127.0.0.1:8118&quot;export https_proxy=&quot;127.0.0.1:8118&quot;export no_proxy=&quot;localhost,127.0.0.1,10.0.0.0/8,172.16.0.0/12,172.24.0.0/12,192.168.0.0/16,172.17.0.1,.svc.cluster.local&quot;</code></pre></div><h3 id="效果测试"><a href="#效果测试" class="headerlink" title="效果测试"></a>效果测试</h3><div class="hljs code-wrapper"><pre><code class="hljs shell">noone@noone-virtual-machine:/tmp$ wget www.google.com--2021-03-24 10:21:45--  http://www.google.com/Connecting to 127.0.0.1:8118... connected.Proxy request sent, awaiting response... 200 OKLength: 12823 (13K) [text/html]Saving to: ‘index.html’index.html                                                          100%[=====&gt;]  12.52K  --.-KB/s    in 0s      2021-03-24 10:21:47 (187 MB/s) - ‘index.html’ saved [12823/12823]noone@noone-virtual-machine:/tmp$ wget www.youtube.comURL transformed to HTTPS due to an HSTS policy--2021-03-24 10:23:09--  https://www.youtube.com/Connecting to 127.0.0.1:8118... connected.Proxy request sent, awaiting response... 200 OKLength: unspecified [text/html]Saving to: ‘index.html.1’index.html.1                                                        100%[=====&gt;] 564.69K  90.4KB/s    in 14s     2021-03-24 10:23:25 (41.1 KB/s) - ‘index.html.1’ saved [578247]noone@noone-virtual-machine:/tmp$</code></pre></div><p>在局域网中，用于提供最终代理服务的服务器是：192.168.0.60，在监听192.168.0.60:10808端口来接受SOCKS5协议的流量。</p><p><img src="https://pic.imgdb.cn/item/60e41c595132923bf84159dd.png" alt="局域网代理软件v2rayN的转发日志"></p><p>观察日志，可以确认使用了Privoxy的Ubuntu已经成功将Linux终端命令行产生的流量转发给代理服务器处理了。</p>]]></content>
    
    
    <categories>
      
      <category>OpenStack-Helm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>代理软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Hexo 推送博客期间出现的问题与解决方案</title>
    <link href="/article/1517646518.html"/>
    <url>/article/1517646518.html</url>
    
    <content type="html"><![CDATA[<h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>近期使用Hexo部署网站到Github远端仓库的时候，经常会出现如下报错：</p><div class="hljs code-wrapper"><pre><code class="hljs shell">[noone@open-source blog]$ hexo dINFO  Validating configINFO  Deploying: gitINFO  Clearing .deploy_git folder...INFO  Copying files from public folder...INFO  Copying files from extend dirs...[master 595037e] Site updated: 2021-03-17 11:54:50 1 file changed, 1 insertion(+), 1 deletion(-)fatal: unable to access &#x27;https://github.com/srezone/srezone.github.io.git/&#x27;: Encountered end of fileFATAL &#123; err:   &#123; Error: Spawn failed       at ChildProcess.task.on.code (/home/noone/WorkSpace/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)       at ChildProcess.emit (events.js:198:13)       at Process.ChildProcess._handle.onexit (internal/child_process.js:248:12) code: 128 &#125; &#125; &#x27;Something\&#x27;s wrong. Maybe you can find the solution here: %s&#x27; &#x27;\u001b[4mhttps://hexo.io/docs/troubleshooting.html\u001b[24m&#x27;[noone@open-source blog]$</code></pre></div><h3 id="根因定位"><a href="#根因定位" class="headerlink" title="根因定位"></a>根因定位</h3><p>几经搜索尝试，无果，恰好前段时间收到一封Github的邮件，告知如下：</p><p><img src="https://img.imgdb.cn/item/60519be5524f85ce298bea98.png" alt="Github弃用密码访问博客仓库的通知"></p><p>OK，基本了解报错的根因：Github的问题，而不是我这边仓库不一致导致提交冲突等乱七八糟的原因。</p><p>接下来的思路是，配置Hexo使用密钥认证方式完成Git提交：</p><h3 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h3><h4 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h4><div class="hljs code-wrapper"><pre><code class="hljs shell">[noone@open-source ~]$ ssh-keygen -t rsa -b 4096 -C &quot;noone@open-source.cc&quot;Generating public/private rsa key pair.Enter file in which to save the key (/home/noone/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /home/noone/.ssh/id_rsa.Your public key has been saved in /home/noone/.ssh/id_rsa.pub.The key fingerprint is:SHA256:Z***1/cn********************u/L*****9 noone@open-source.ccThe key&#x27;s randomart image is:+---[RSA 4096]----+|                 ||=. . .           ||=. . .           ||=. . .           ||=. . .           ||=. . .           ||=. . .           ||  o+o... o o. o =||  o+o... o o. o =|+----[SHA256]-----+[noone@open-source ~]$ cd .ssh/[noone@open-source .ssh]$ lltotal 12-rw------- 1 noone noone 3243 Mar 17 13:33 id_rsa-rw-r--r-- 1 noone noone  746 Mar 17 13:33 id_rsa.pub-rw-r--r-- 1 noone noone 1049 Mar 15 22:11 known_hosts</code></pre></div><h4 id="配置Github使用密钥认证"><a href="#配置Github使用密钥认证" class="headerlink" title="配置Github使用密钥认证"></a>配置Github使用密钥认证</h4><p>妥善保存私钥文件（id_rsa），将公钥文件（id_rsa.pub）内容复制，粘贴到Github对应的页面中，完成GitHub端的具体配置：</p><p><img src="https://img.imgdb.cn/item/6051a018524f85ce298e6583.png" alt="Github设置密钥登录的配置界面"></p><p>验证密钥配置是否生效，如果配置成功会返回具体提示，如下：</p><div class="hljs code-wrapper"><pre><code class="hljs shell">[noone@open-source .ssh]$ ssh -T git@github.comThe authenticity of host &#x27;github.com (13.250.777.333)&#x27; can&#x27;t be established.RSA key fingerprint is SHA256:n******************************************.RSA key fingerprint is MD5:16:27:ac:a5:16:27:ac:a5:16:27:ac:a5:16:27:ac:a5.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added &#x27;github.com,13.250.777.333&#x27; (RSA) to the list of known hosts.Hi srezone! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.[noone@open-source .ssh]$</code></pre></div><h4 id="配置Hexo使用SSH密钥认证方式"><a href="#配置Hexo使用SSH密钥认证方式" class="headerlink" title="配置Hexo使用SSH密钥认证方式"></a>配置Hexo使用SSH密钥认证方式</h4><p>修改Hexo站点根目录下的配置文件，在deploy字段将相关配置行修改为SSH格式：</p><div class="hljs code-wrapper"><pre><code class="hljs shell">[noone@open-source blog]$ vim _config.yml......<span class="hljs-meta">#</span><span class="bash"> Deployment</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># Docs: https://hexo.io/docs/one-command-deployment</span></span>deploy:   type: git<span class="hljs-meta">#</span><span class="bash">  repository: https://github.com/srezone/srezone.github.io.git</span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 删除上面这行，上面的URL是用于HTTPS连接，使用用户名密码登录</span></span><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># 修改为下面这行的格式，用户名和仓库名使用自己的替换即可</span></span>   repository: git@github.com:srezone/srezone.github.io.git   branch: main......</code></pre></div><p>重新部署，没有问题，且没有了输入用户名和密码的环节，显得非常流畅顺滑：</p><div class="hljs code-wrapper"><pre><code class="hljs shell">[noone@open-source blog]$ hexo gINFO  Validating configINFO  Start processingINFO  Files loaded in 329 msINFO  0 files generated in 383 ms[noone@open-source blog]$ hexo dINFO  Validating configINFO  Deploying: gitINFO  Clearing .deploy_git folder...INFO  Copying files from public folder...INFO  Copying files from extend dirs...<span class="hljs-meta">#</span><span class="bash"> On branch master</span>nothing to commit, working directory cleanBranch master set up to track remote branch main from git@github.com:srezone/srezone.github.io.git.Everything up-to-dateINFO  Deploy done: git[noone@open-source blog]$</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>博客运营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Facebook F4 两级 Clos 网络架构-纯图</title>
    <link href="/article/1394958544.html"/>
    <url>/article/1394958544.html</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.imgdb.cn/item/6020edd73ffa7d37b38f4ed5.jpg" alt="Facebook F4"></p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Clos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 快速入门</title>
    <link href="/article/93640367.html"/>
    <url>/article/93640367.html</url>
    
    <content type="html"><![CDATA[<p>Hexo使用入门，翻译自Hexo安装后自带的说明。</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="创建一篇新文章"><a href="#创建一篇新文章" class="headerlink" title="创建一篇新文章"></a>创建一篇新文章</h3><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo new <span class="hljs-string">&quot;My New Post&quot;</span></span></code></pre></div><p>更多信息:  <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo server</span></code></pre></div><p>更多信息:  <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生产文章页面"><a href="#生产文章页面" class="headerlink" title="生产文章页面"></a>生产文章页面</h3><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo generate</span></code></pre></div><p>更多信息:  <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到远端站点"><a href="#部署到远端站点" class="headerlink" title="部署到远端站点"></a>部署到远端站点</h3><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo deploy</span></code></pre></div><p>更多信息:  <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>博客运营</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
